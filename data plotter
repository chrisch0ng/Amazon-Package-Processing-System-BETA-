import matplotlib.pyplot as plt
from build_countries import *


def get_bar_co2_pc_by_continent(country_dictionary, input_year):
    """
    Input Arguments: (dict, int) >>> list
    
    Description: given an input dictionary, and an integer representing a year, function creates a bar plot representing
    the co2 emissions per capita (in tonnes) produced by all countries in each continent. With Bars appearing in alphabetical order,
    the function returns a list of the values being plotted 
    
    >>> d1 = get_countries_from_file("small_co2_data.tsv")
    >>> get_bar_co2_pc_by_continent(d1, 2001)
    [0.20320332558992543, 67.01626016260163, 7.6609004739336495, 1.4196063588190764]
    
    >>> d2 = get_countries_from_file("small_co2_data.tsv")
    get_bar_co2_pc_by_continent(d2, 2000)
    []
    
    >>> d3 = get_countries_from_file("small_co2_data.tsv")
    >>> get_bar_co2_pc_by_continent(d3, 2006)
    [0.027448831701368023]
    """
    
    
    total_co2_emissions_by_continent = {} # sets variable to empty dictionary to map continents to their respective total co2 emissions 
    total_population_by_continent = {} # sets variable to empty dictionary to map continents to their respective total populations
    
    alphabetically_ordered_continents = [] # sets variable to empty list to contain x values 
    ordered_co2_per_capita_by_continent = [] # sets variable to empty list to contain y values 

    for country in country_dictionary: # scans through each country in the given input country dictionary 
        current_country = country_dictionary.get(country) # retrieves Country object from value of dictionary 
        current_continents = current_country.continents # retrieves list of continents that country is part of from given Country object
        current_co2_emissions_in_year = current_country.get_co2_emissions_by_year (input_year) 
        
        for continent in current_continents: # scans through each continent in continent list 
            if "," not in continent: # ensures continent is not multiple continents 
                if input_year not in current_country.co2_emissions or input_year not in current_country.population:
                    continue # if input year is not in population or co2 emissions data, skips loop 
                
                elif continent in total_co2_emissions_by_continent and continent in total_population_by_continent:
                    # if continent already in these two data dictionaries, function adds new data to previous data and rewrites dictionary
                    # to accommodate this new data 
                    
                    current_total_population_in_year = current_country.population [input_year]
                    
                    previous_total_co2_emission = total_co2_emissions_by_continent.get(continent)
                    previous_total_population = total_population_by_continent.get(continent)
                    
                    total_co2_emissions_by_continent [continent] = previous_total_co2_emission + current_co2_emissions_in_year
                    total_population_by_continent [continent] = previous_total_population + current_total_population_in_year
                    
                else:
                    # if continent has not yet been written to the two primary data dictionaries, function creates new entry using
                    # retrieved data 
                    current_total_population_in_year = current_country.population [input_year]
                    total_co2_emissions_by_continent [continent] = current_co2_emissions_in_year
                    total_population_by_continent [continent] = current_total_population_in_year
            else:
                continue
            
    for continent in total_co2_emissions_by_continent: # adds each continent in this data dictionary to new list to be alphabetically ordered 
        alphabetically_ordered_continents.append(continent)
        
    alphabetically_ordered_continents.sort() # sorts each continent in list by alphabetical order, now providing the proper x value to be used 
    
    for continent in alphabetically_ordered_continents: # scans through each continent in the alphabetically ordered list of continents 
        continent_co2_emissions_in_tonnes = total_co2_emissions_by_continent.get(continent) * 1000000 # calculates proper value, in tonnes 
        continent_population = total_population_by_continent.get(continent) # retrieves proper population value 
        
        co2_per_capita_in_continent = continent_co2_emissions_in_tonnes / continent_population # calculates proper co2 emissions per capita in year 
        ordered_co2_per_capita_by_continent.append(co2_per_capita_in_continent) # appends calculated value to new list to be used as y value 
    
    for continent in alphabetically_ordered_continents: # scans through values in list to be used as x values
        continent_index = alphabetically_ordered_continents.index(continent)
        if continent == "NORTH AMERICA": # abbreviates NORTH AMERICA top N. AMERICA
            alphabetically_ordered_continents[continent_index] = "N. AMERICA"
        if continent == "SOUTH AMERICA": # abbreviates SOUTH AMERICA top S. AMERICA
            alphabetically_ordered_continents[continent_index] = "S. AMERICA"
        
    plt.bar(alphabetically_ordered_continents, ordered_co2_per_capita_by_continent) # plots bar graph with names of similarity functions and scores achieved by them
    
    plt.title('CO2 emissions per capita in ' + str(input_year) + ' by christopher.chong2@mail.mcgill.ca') # titles bar graph 
    
    plt.ylabel('co2 (in tonnes)') # labels proper y value 
    
    plt.plot() # plots graph 
    
    plt.savefig('co2_pc_by_continent_' + str(input_year) + '.png') # saves figure in co2_pc_by_continent[input_year].png
    
    return ordered_co2_per_capita_by_continent # returns values that have been plotted


    
def get_bar_historical_co2_by_continent (country_dictionary, input_year):
    """
    Input Arguments: (dict, int) >>> list
    
    Description: given an input dictionary, and an integer representing a year, function creates a bar plot representing
    the historical co2 emissions (in millions of tonnes) produced by all countries in each continent, with function returning
    a list of the values being plotted 
    
    >>> d1 = get_countries_from_file("small_co2_data.tsv")
    >>> (get_bar_historical_co2_by_continent(d1, 2015))[0]
    4.877
    
    >>> d1 = get_countries_from_file("small_co2_data.tsv")
    >>> (get_bar_historical_co2_by_continent(d1, 2015))[1]
    207.54500000000002

    >>> d1 = get_countries_from_file("small_co2_data.tsv")
    >>> (get_bar_historical_co2_by_continent(d1, 2015))[3]
    149.34300000000002
    
    """
    
    countries_by_continent = {} # sets variable to empty dictionary
    ordered_continents_list = [] # sets variable to empty list 
    ordered_historical_co2_values = [] # sets variable to empty list 
    
    
    for country in country_dictionary: # scans through each country iso code in the country dictionary
        current_country = country_dictionary.get(country) # retrieves country object from value of country dictionary
        current_continents = current_country.continents # retrieves continents list from country object 
        
        current_continents = current_continents[0].split(", ") # selects first element of continents list (each has only one element) and splits if
                                                                # there are multiple continents 
        for continent in current_continents: # scans through each continent in the continents list 
        
            if continent in countries_by_continent: # if continent already in countries by continent dictionary
                
                countries_in_continent = countries_by_continent.get(continent) # retrieves previous value from continent dictionary
                 
                countries_in_continent.append(current_country) # appends new country object to list 
                
                countries_by_continent [continent] = countries_in_continent # sets value of countries by continent dictionary to the updated version of the list
                
            else: # if continent not already in the countries by continent dictionary
                countries_by_continent [continent] = [current_country] # creates new key value pair entry, with current country object as first element in list
                ordered_continents_list.append(continent) # adds continent to the ordered_continent_list to be used as the x axis later on
       
    ordered_continents_list.sort() # sorts list of continents by alphabetical order 

    for continent in ordered_continents_list: # scans through each continent in the list of alphabetically arranged continents 
        total_continent_co2_emissions = 0 # sets variable to be initially 0 
        countries_in_continent_list = countries_by_continent.get(continent) # gets list of countries within continent from previously constructed dictionary
        
        continent_co2_emissions_dict = Country.get_historical_co2_emissions (countries_in_continent_list, input_year) # retrieves vital data from country object
        
        for country in continent_co2_emissions_dict: # scans through each country in calculated dictionary 
            total_continent_co2_emissions += continent_co2_emissions_dict.get(country) # adds value to total continent co2 emissions variable 
        
        ordered_historical_co2_values.append(total_continent_co2_emissions) # appends calculated value to the ordered_historical_co2_values list 
        # since the ordered_continents_list is in alphabetical order, and we are scanning through that list, the co2 values calculated in that same order
        # are now in their proper places to be used as the y axis 
        
        
    for continent in ordered_continents_list: # this for loop simply abbreviates NORTH AMERICA and SOUTH AMERICA to their proper abbreviated versions 
        continent_index = ordered_continents_list.index(continent)
        if continent == "NORTH AMERICA":
            ordered_continents_list[continent_index] = "N. AMERICA"
        if continent == "SOUTH AMERICA":
            ordered_continents_list[continent_index] = "S. AMERICA"
            
    plt.bar(ordered_continents_list, ordered_historical_co2_values) # plots bar graph with names of similarity functions and scores achieved by them
    
    plt.title('Historical CO2 emissions up to ' + str(input_year) + ' by christopher.chong2@mail.mcgill.ca') # titles graph appropriately
    
    plt.ylabel('co2 (in millions of tonnes)') # sets label of the y axis 
    
    plt.plot() # plots graph 
    
    plt.savefig('hist_co2_by_continent_' + str(input_year) + '.png') # saves figure in 'hist_co2_by_continent[input_year].png'
    
    return ordered_historical_co2_values # returns the values that are being graphed on the y axis
    



def get_bar_co2_pc_top_ten (country_dictionary, input_year):
    """
    Input Arguments: (dict, int) >>> list
    
    Description: given an input dictionary, and an integer representing a year, function creates a bar plot representing
    the co2 emissions per capita (in tonnes) produced by the top 10 producing countries in the dictionary and returns a list of
    the values that are being plotted 
    
    >>> d1 = get_countries_from_file("small_co2_data.tsv")
    >>> data = get_bar_co2_pc_top_ten(d1, 2001)
    >>> data[0]
    67.01626016260163
    
    >>> d1 = get_countries_from_file("small_co2_data.tsv")
    >>> data = get_bar_co2_pc_top_ten(d1, 2001)
    >>> data[1]
    7.968406557717789
    
    >>> d1 = get_countries_from_file("small_co2_data.tsv")
    >>> data = get_bar_co2_pc_top_ten(d1, 2001)
    >>> data[3]
    1.4196063588190764

    """
    co2_per_capita_dict = {} # maps co2 per capita to list of respective countries
    ordered_co2_per_capita_list = [] # list used to put y values in order before graphing
    ordered_country_list = [] # list used to put x values in order before graphing 
    
    for iso_code in country_dictionary: # scans through each iso code in the country dictionary
        country = country_dictionary.get(iso_code) # retrieves the country object in the value of each entry of the country dictionary 
        country_co2_emissions_for_year = country.get_co2_per_capita_by_year (input_year) # obtains co2_per_capita in specified year 
        
        if country_co2_emissions_for_year != None: # so long as value is not None
            co2_per_capita_dict [country_co2_emissions_for_year] = iso_code # co2_per_capita value gets mapped to proper iso code 
            ordered_co2_per_capita_list.append(country_co2_emissions_for_year) # co2_per_capita value also gets appended to list for y values 
    
    ordered_co2_per_capita_list.sort(reverse = True) # orders this y value list from greatest to least
    
    if len (ordered_co2_per_capita_list) > 10: # ensures that length of y value list if equal to or less than 10 
        ordered_co2_per_capita_list = ordered_co2_per_capita_list [:10] # chooses only top 10 producing countries 
    
    for co2_per_capita in ordered_co2_per_capita_list: # for each co2_per_capita value in the ordered y value list 
        matching_iso_code = co2_per_capita_dict.get(co2_per_capita) # retrieves proper iso code from highest co2_per_capita value first, then lowest
        ordered_country_list.append(matching_iso_code) # appends iso codes in order from highest co2_per_capita value to lowest, giving the x values required
    
    
    plt.bar(ordered_country_list, ordered_co2_per_capita_list) # plots bar graph with iso codes matching the proper values, from highest to lowest 
    
    plt.title('Top 10 countries for CO2 emissions pc in ' + str(input_year) + ' by christopher.chong2@mail.mcgill.ca') # appropriately titles graph 
    
    plt.ylabel('co2 (in tonnes)') # sets label of y axis 
    
    plt.plot() # plots bar graph 
    
    plt.savefig('top_10_co2_pc_' + str(input_year) + '.png') # saves figure in 'top_10_co2_pc_[year].png'
    
    return ordered_co2_per_capita_list # returns y value list 
    


def get_bar_top_ten_historical_co2 (country_dictionary, input_year):
    """
    Input Arguments: (dict, int) >>> list
    
    Description: given an input dictionary, and an integer representing a year, function creates a bar plot representing
    the historical co2 emissions (in millions of tonnes) produced by the top 10 producing countries in the dictionary. With
    function returning list of values being plotted 
    
    >>> d1 = get_countries_from_file("small_co2_data.tsv")
    >>> data = get_bar_top_ten_historical_co2(d1, 2015)
    >>> data[0]
    306.696

    >>> d1 = get_countries_from_file("small_co2_data.tsv")
    >>> data = get_bar_top_ten_historical_co2(d1, 2015)
    >>> data[1]
    166.33

    >>> d1 = get_countries_from_file("small_co2_data.tsv")
    >>> data = get_bar_top_ten_historical_co2(d1, 2015)
    >>> data[5] 
    3.748

    """
    
    hist_co2_emissions_dict = {} # maps countries to their respective historic co2 emissions 
    country_list = [] 
    
    ordered_hist_co2_list = [] # list to contain historic co2 emissions in order and become y value list
    ordered_iso_code_list = [] # list to contain iso codes in order and become x value list 
    
    for iso_code in country_dictionary: # scans through each iso code in the country_dictionary 
        country = country_dictionary.get(iso_code) # sets variable to country object contained in country_dictionary value 
        country_list.append(country) # adds country object to country_list variable 
    
    country_hist_co2_emissions = Country.get_historical_co2_emissions (country_list, input_year) # obtains dictionary with all historical co2 emission
                                                                                                # mapped to every country in country_list 
    
    for country in country_hist_co2_emissions: # scans through each iso code mapped to country object in dictionary 
        country_hist_co2_emission = country_hist_co2_emissions.get(country) # retrieves country object
        ordered_hist_co2_list.append(country_hist_co2_emission) # appends country historical co2 emission value to list to be sorted later
        hist_co2_emissions_dict [country_hist_co2_emission] = country # creates dictionary entry with historical co2 emission value mapped to country object
        
    ordered_hist_co2_list.sort(reverse = True) # sorts list of historical co2 emission values from greatest to least
    
    for hist_co2_emission in ordered_hist_co2_list: # scans through each historical co2 emission value in ordered list 
        current_country = hist_co2_emissions_dict.get(hist_co2_emission) # retrieves country object with matching historical co2 emission value 
        iso_code = current_country.iso_code # sets variable to iso code of current country object 
        ordered_iso_code_list.append(iso_code) # appends iso code to ordered_iso_code_list 
        
    
    if len (ordered_iso_code_list) > 10: # ensures that length of list if less than 10 
        ordered_iso_code_list = ordered_iso_code_list [:10]
        ordered_hist_co2_list = ordered_hist_co2_list [:10]
    
    
    plt.bar(ordered_iso_code_list, ordered_hist_co2_list) # plots bar graph with names of similarity functions and scores achieved by them
    
    plt.title('Top 10 countries for historical CO2 up to' + str(input_year) + ' by christopher.chong2@mail.mcgill.ca') # appropriately titles graph 
    
    plt.ylabel('co2 (in millions of tonnes)') # labels y axis of graph 
    
    plt.plot() # plots graph 
    
    plt.savefig('top_10_hist_co2_' + str(input_year) + '.png') # saves figure in top_10_co2_pc_[year].png
    
    return ordered_hist_co2_list # returns list of y values being plotted 



def get_plot_co2_emissions (country_dictionary, iso_codes, min_year, max_year):
    """
    Input Arguments: (dict, int) >>> list
    
    Description: given an input dictionary, a list of strings representing ISO codes, an integer representing min_year, and an integer representing
    max_year, function creates a graph with data plotted from each of selected countries, with data from years between min_year and max_year
    
    >>> d1 = get_countries_from_file("large_co2_data.tsv")
    >>> data = get_plot_co2_emissions(d1, ["USA", "CHN", "RUS", "DEU", "GBR"], 1990, 2000)
    >>> len(data)
    5
    
    >>> d2 = get_countries_from_file("large_co2_data.tsv")
    >>> data = get_plot_co2_emissions(d2, ["CHN"], 1990, 2000)
    >>> len(data[1])
    11
    
    >>> d2 = get_countries_from_file("large_co2_data.tsv")
    >>> data = get_plot_co2_emissions(d2, ["DEU", "GBR"], 1800, 2000)
    >>> len(data[4][190])
    600.773
    >>> 
    
    """
    
    co2_emissions_dict = {} # dictionary mapping iso code to list of data of co2_emissions values from years between min_year and max_year
    co2_emissions_list = [] # list containing sublists with co2 emissions data, used as y axis in graph 
    temp_co2_emissions_list = [] # temporary list containing lists which are sublists with co2 emissions data
    year_list = [] # list of years between max year and min year, to be used as x axis in graph 
    
    total_years = max_year - min_year # calculates total amount of years between max year and min year 
    
    step_size = total_years / 10 # calculates size of each step to determine values of years between max year and min year 
    
    
    for count in range(11): # for loop which calculates each individual value of years between max and min year, creating basis for x axis 
        current_year = min_year + step_size * count
        year_list.append(current_year)
    
    for iso_code in iso_codes: # scans through each iso code in given iso code list 
        current_country = country_dictionary.get(iso_code) # retrieves country object using current looped iso code 
        
        for year in year_list: # scans through each year in calculated year_list 
            try: # adds co2 emissions data to temporary co2 emissions list so long as an error is not raised 
                current_year_co2_emissions = current_country.get_co2_emissions_by_year (year)
                temp_co2_emissions_list.append(current_year_co2_emissions)
            except:
                temp_co2_emissions_list.append(0) # adds 0 to temporary co2 emissions list if error is raised 
        
        co2_emissions_dict[iso_code] = temp_co2_emissions_list # adds sublist of temporary co2 emissions list to the dictionary, mapped to iso code
        co2_emissions_list.append(temp_co2_emissions_list) # adds sublist of temporary co2 emissions list to the co2 emissions list 
        
        temp_co2_emissions_list = [] # resets the temporary co2 emissions list to be used for the next iso code 
    
    
    x = year_list # sets x axis value to year_list 
    
    y1 = co2_emissions_dict[iso_codes[0]] # sets value to element of proper sublist value in the co2 emissions dictionary 
    
    y2 = co2_emissions_dict[iso_codes[1]] # sets value to element of proper sublist value in the co2 emissions dictionary 
    
    y3 = co2_emissions_dict[iso_codes[2]] # sets value to element of proper sublist value in the co2 emissions dictionary 
    
    y4 = co2_emissions_dict[iso_codes[3]] # sets value to element of proper sublist value in the co2 emissions dictionary 
    
    y5 = co2_emissions_dict[iso_codes[4]] # sets value to element of proper sublist value in the co2 emissions dictionary 
    
    
    plt.plot(x, y1, label = iso_codes[0], color = 'blue') # plots line on graph with proper values and distinguishing features
    
    plt.plot(x, y2, label = iso_codes[1], color = 'red') # plots line on graph with proper values and distinguishing features

    plt.plot(x, y3, label = iso_codes[2], color = 'green') # plots line on graph with proper values and distinguishing features

    plt.plot(x, y4, label = iso_codes[3], color = 'indigo') # plots line on graph with proper values and distinguishing features

    plt.plot(x, y5, label = iso_codes[4], color = 'darkblue') # plots line on graph with proper values and distinguishing features
    

    plt.legend(iso_codes) # sets legend for graph 
    
    plt.title('‘CO2 emissions between ' + str(min_year) + ' and' + str(max_year) + 'by christopher.chong2@mail.mcgill.ca') # sets title for graph 
    
    plt.ylabel('‘co2 (in millions of tonnes)') # sets label for y axis 
    
    plt.plot() # plots graph 
    
    plt.savefig('co2_emissions_' + str(min_year) + '_' + str(max_year) + ".png") # saves figure in properly named png file 
    
    return co2_emissions_list # returns 2D list with each sublist containing co2 emission of a selected country from min year to max year 
    


